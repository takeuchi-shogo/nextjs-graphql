type Query {
  account: Accounts!
  me: Users!
  # users: [Users]
  users(first: Int!, after: String!): UserConnection!
  user(id: ID!): Users!
  user_search_filters: UserSearchFilters!
  verify_email(code: String): VerifyEmails!
}

type Accounts {
  id: ID!
  phone_number: String!
  email: String!
  password: String!
  login_status: Boolean!
  access_level: String!
}

type Likes {
  id: ID!
  send_user_id: Int!
  receive_user_id: Int!
  created_at: Int!
}

type Users {
  id: ID!
  uuid: String!
  account_id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  location: String!
  is_authorize_email: Boolean!
  is_verified_email: Boolean!
  is_verified_age: Boolean!
}

type PageInfo {
  has_next_page: Boolean!
  has_previous_page: Boolean!
  start_cursor: String
  end_cursor: String
}

type UserProfiles {
  id: ID!
  user_id: Int!
  introduction: String!
  interests: String!
  looking_for: String!
}

type UserConnection {
  edges: [UserEdge!]!
  page_info: PageInfo!
}

type UserEdge {
  cursor: String!
  node: ResponseUsers!
}

type UserSearchFilters {
  # age: Int
  gender: String
  location: String
}

type VerifyEmails {
  id: ID!
  email: String!
  token: String!
  pin_code: String!
}

input NewAccounts {
  id: Int!
  phone_number: String!
  email: String!
  password: String!
}

input NewUsers {
  id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  location: String!
}

input NewUserSearchFilters {
  gender: String
  location: String
}

input UpdateUserSearchFilters {
  id: ID!
  gender: String
  location: String
}

input NewVerifyEmails {
  email: String!
}

input NewLogin {
  email: String!
  password: String!
}

input NewLikes {
  receive_user_id: Int!
}

type Mutation {
  createAccount(input: NewAccounts): Accounts!
  createAccountAndUser(account: NewAccounts, user: NewUsers): Users!
  createLike(input: NewLikes): Likes!
  createUser(input: NewUsers): Users!
  createVerifyEmail(input: NewVerifyEmails): VerifyEmails!
  Login(input: NewLogin!): Users!

  createUserSearchFilters(input: NewUserSearchFilters): UserSearchFilters!
  updateUserSearchFilters(input: UpdateUserSearchFilters): UserSearchFilters!

  updateAccount(input: NewAccounts!): NewAccounts!
  updateUser(input: NewUsers!): Users!
}
