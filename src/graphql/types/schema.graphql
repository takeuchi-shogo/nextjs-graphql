type Query {
  account(id: ID!): Accounts!
  users: [Users]
  # user(id: ID!): Users!
  verify_email(code: String): VerifyEmails!
}

type Accounts {
  id: ID!
  phone_number: String!
  email: String!
  password: String!
  login_status: Boolean!
  access_level: String!
}

type Users {
  id: ID!
  account_id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  location: String!
  is_authorize_email: Boolean!
  is_verified_email: Boolean!
  is_verified_age: Boolean!
}

type VerifyEmails {
  id: ID!
  email: String!
  token: String!
  pin_code: String!
}

input NewAccounts {
  phone_number: String!
  email: String!
  password: String!
}

input NewUsers {
  display_name: String!
  screen_name: String!
}

input NewVerifyEmails {
  email: String!
}

input NewLogin {
  email: String!
  password: String!
}

type Mutation {
  createAccount(input: NewAccounts): Accounts!
  createAccountAndUser(account: NewAccounts, user: NewUsers): Users!
  createUser(input: NewUsers): Users!
  createVerifyEmail(input: NewVerifyEmails): VerifyEmails!
  Login(input: NewLogin!): Users!
}
