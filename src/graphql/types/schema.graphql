type Query {
  account: Accounts!
  me: Users!
  home: HomeTimeLine!

  tweets(user_id: Int!): TweetConnection!
  tweet(id: ID!): Tweets!
  # users: [Users]
  users(first: Int!, after: String!): UserConnection!
  user(id: ID!): Users!
  user_search_filters: UserSearchFilters!
  verify_email(code: String): VerifyEmails!
}

type Accounts {
  id: ID!
  phone_number: String!
  email: String!
  password: String!
  login_status: Boolean!
  access_level: String!
}

type HomeTimeLine {
  tweets: [Tweets!]
  metadata: Metadata!
}

type Likes {
  id: ID!
  send_user_id: Int!
  receive_user_id: Int!
  created_at: Int!
}

type Users {
  id: ID!
  uuid: String!
  account_id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  age: Int!
  location: String!
  is_authorize_email: Boolean!
  is_verified_email: Boolean!
  is_verified_age: Boolean!
}

type PageInfo {
  has_next_page: Boolean!
  has_previous_page: Boolean!
  start_cursor: String
  end_cursor: String
}

type UserProfiles {
  id: ID!
  user_id: Int!
  introduction: String!
  interests: String!
  looking_for: String!
}

type UserConnection {
  edges: [UserEdge!]!
  page_info: PageInfo!
}

type UserEdge {
  cursor: String!
  node: ResponseUsers!
}

type UserSearchFilters {
  # age: Int
  gender: String
  location: String
  purpose: Int!
  has_introduction: Boolean
  # height_id: Int
  body_type_id: Int!
  blood_type_id: Int!
  # residence_country_id: Int
  # residence_state_id: Int
  # hometown_country_id: Int
  # hometown_state_id: Int
  occupation_id: Int!
  education_id: Int!
  annual_income_id: Int!
  smoking_id: Int!
  drinking_id: Int!
}

type VerifyEmails {
  id: ID!
  email: String!
  token: String!
  pin_code: String!
}

input NewAccounts {
  id: Int!
  phone_number: String!
  email: String!
  password: String!
}

input NewUsers {
  id: Int!
  display_name: String!
  screen_name: String!
  gender: String!
  location: String!
}

input UpdateUsers {
  display_name: String!
  gender: String!
  age: Int!
  location: String!
}

input NewUserSearchFilters {
  gender: String
  location: String
}

input UpdateUserSearchFilters {
  id: ID!
  gender: String
  location: String
  purpose: Int!
  has_introduction: Boolean!
  height_id: Int!
  body_type_id: Int!
  blood_type_id: Int!
  # residence_country_id: Int!
  # residence_state_id: Int!
  # hometown_country_id: Int!
  # hometown_state_id: Int!
  occupation_id: Int!
  education_id: Int!
  annual_income_id: Int!
  smoking_id: Int!
  drinking_id: Int!
}

input UpdateUserProfiles {
  id: ID!
  # user_id: Int!
	# introduction: String!

	# height_id: Int!
	body_type_id: Int!
	blood_type_id: Int!
	residence_id: Int!
	hometown_id: Int!
	occupation_id: Int!
	education_id: Int!
	annual_income_id: Int!
	smoking_id: Int!
	drinking_id: Int!

	# siblings_id: Int!
	# language_id: Int!
	# interests_id: Int!
	# looking_for_id: Int!

	# school_name: String!
	# job_title: String!

	# marital_history_id: Int!
	# presence_of_children_id: Int!
	# intentions_towards_marriage_id: Int!
	# desire_for_children_id: Int!
	# household_chores_and_child_rearing_id: Int!
	# indeal_first_encointer_id: Int!
	# dating_expenses_id: Int!

	# presonality_type_id: Int!
	# sociability_id: Int!
	# roommates_id: Int!
	# days_off_id: Int!
	# hobbies_id: Int!
}

input NewVerifyEmails {
  email: String!
}

input NewLogin {
  email: String!
  password: String!
}

input NewLikes {
  receive_user_id: Int!
}

type Mutation {
  createAccount(input: NewAccounts): Accounts!
  createAccountAndUser(account: NewAccounts, user: NewUsers): Users!
  createLike(input: NewLikes): Likes!
  createUser(input: NewUsers): Users!
  createVerifyEmail(input: NewVerifyEmails): VerifyEmails!
  Login(input: NewLogin!): Users!

  createUserSearchFilters(input: NewUserSearchFilters): UserSearchFilters!
  updateUserSearchFilters(input: UpdateUserSearchFilters): UserSearchFilters!

  updateAccount(input: NewAccounts!): NewAccounts!
  updateUser(input: UpdateUsers!): Users!

  updateUserProfile(input: UpdateUserProfiles!): UserProfiles!
}
